// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package Models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeBenchmarkStructConversionModels(in *jlexer.Lexer, out *Response2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "X":
			out.X = int(in.Int())
		case "Y":
			out.Y = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeBenchmarkStructConversionModels(out *jwriter.Writer, in Response2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix[1:])
		out.Int(int(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.String(string(in.Y))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeBenchmarkStructConversionModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeBenchmarkStructConversionModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeBenchmarkStructConversionModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeBenchmarkStructConversionModels(l, v)
}
func easyjsonC80ae7adDecodeBenchmarkStructConversionModels1(in *jlexer.Lexer, out *Response1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Page":
			out.Page = int(in.Int())
		case "Fruits":
			out.Fruits = string(in.String())
		case "Z":
			if in.IsNull() {
				in.Skip()
				out.Z = nil
			} else {
				if out.Z == nil {
					out.Z = new(Response2)
				}
				(*out.Z).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeBenchmarkStructConversionModels1(out *jwriter.Writer, in Response1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Page\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"Fruits\":"
		out.RawString(prefix)
		out.String(string(in.Fruits))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		if in.Z == nil {
			out.RawString("null")
		} else {
			(*in.Z).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeBenchmarkStructConversionModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeBenchmarkStructConversionModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeBenchmarkStructConversionModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeBenchmarkStructConversionModels1(l, v)
}
